{"filter":false,"title":"BoardGeneration.java","tooltip":"/project/BoardGeneration.java","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":258,"column":1},"action":"insert","lines":["import java.util.Arrays;","","//pawn=P/p","//kinght (horse)=N/n","//bishop=B/b","//rook (castle)=R/r","//Queen=Q/q","//King=K/k","","public class BoardGeneration {","    public static void normalChess() {","    \t/*","    \t this method generate chess board","    \t */","        long WP = 0L, WN = 0L, WB = 0L, WR = 0L, WQ = 0L, WK = 0L, BP = 0L, BN = 0L, BB = 0L, BR = 0L, BQ = 0L, BK = 0L;","        String chessBoard[][] = {","                {\"r\",\"n\",\"b\",\"q\",\"k\",\"b\",\"n\",\"r\"},","                {\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\"},","                {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","                {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","                {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","                {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","                {\"P\",\"P\",\"P\",\"P\",\"P\",\"P\",\"P\",\"P\"},","                {\"R\",\"N\",\"B\",\"Q\",\"K\",\"B\",\"N\",\"R\"}};","        arrayToBitboards(chessBoard, WP, WN, WB, WR, WQ, WK, BP, BN, BB, BR, BQ, BK);","    }","    public static void chess960() {","    \t/*","    \t * this method generate a random chess board","    \t * all pawn stays in their places","    \t * but all other piece are shuffled","    \t * there is a 960 different ways to rearrange pieces*/","        long WP = 0L, WN = 0L, WB = 0L, WR = 0L, WQ = 0L, WK = 0L, BP = 0L, BN = 0L, BB = 0L, BR = 0L, BQ = 0L, BK = 0L;","        String chessBoard[][]={","            {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","            {\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\"},","            {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","            {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","            {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","            {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"},","            {\"P\",\"P\",\"P\",\"P\",\"P\",\"P\",\"P\",\"P\"},","            {\" \",\" \",\" \",\" \",\" \",\" \",\" \",\" \"}};","        //step 1:","        int random1 = (int)(Math.random()*8);","        chessBoard[0][random1] = \"b\";","        chessBoard[7][random1] = \"B\";","        //step 2:","        int random2 = (int)(Math.random() * 8);","        while (random2 % 2 == random1 % 2) {","            random2 = (int)(Math.random() * 8);","        }","        chessBoard[0][random2] = \"b\";","        chessBoard[7][random2] = \"B\";","        //step 3:","        int random3 = (int)(Math.random() * 8);","        while (random3 == random1 || random3 == random2) {","            random3 = (int)(Math.random() * 8);","        }","        chessBoard[0][random3] = \"q\";","        chessBoard[7][random3] = \"Q\";","        //step 4:","        int random4a = (int)(Math.random() * 5);","        int counter = 0;","        int loop = 0;","        while (counter - 1 < random4a) {","            if (\" \".equals(chessBoard[0][loop])) {counter++;}","            loop++;","        }","        chessBoard[0][loop-1] = \"n\";","        chessBoard[7][loop-1] = \"N\";","        int random4b = (int)(Math.random() * 4);","        counter = 0;","        loop = 0;","        while (counter - 1 < random4b) {","            if (\" \".equals(chessBoard[0][loop])) {counter++;}","            loop++;","        }","        chessBoard[0][loop-1] = \"n\";","        chessBoard[7][loop-1] = \"N\";","        //step 5:","        counter = 0;","        while (!\" \".equals(chessBoard[0][counter])) {","            counter++;","        }","        chessBoard[0][counter] = \"r\";","        chessBoard[7][counter] = \"R\";","        while (!\" \".equals(chessBoard[0][counter])) {","            counter++;","        }","        chessBoard[0][counter] = \"k\";","        chessBoard[7][counter] = \"K\";","        while (!\" \".equals(chessBoard[0][counter])) {","            counter++;","        }","        chessBoard[0][counter] = \"r\";","        chessBoard[7][counter] = \"R\";","        arrayToBitboards(chessBoard, WP, WN, WB, WR, WQ, WK, BP, BN, BB, BR, BQ, BK);","    }","    public static void importFEN(String fenString) {","    \t/*convert fen string to chess board (bitboards)","    \tfen string look like this:","    \trnbqkbnr/ppp1pppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1","    \t*/","\tStart.WP = 0; Start.WN = 0; Start.WB = 0;","        Start.WR = 0; Start.WQ = 0; Start.WK = 0;","        Start.BP = 0; Start.BN = 0; Start.BB = 0;","        Start.BR = 0; Start.BQ = 0; Start.BK = 0;","        Start.CWK = false; Start.CWQ = false;","        Start.CBK = false; Start.CBQ = false;","\tint charIndex = 0;","\tint boardIndex = 0;","\twhile (fenString.charAt(charIndex) != ' ')","\t{","\t\tswitch (fenString.charAt(charIndex++))","\t\t{","\t\tcase 'P': Start.WP |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'p': Start.BP |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'N': Start.WN |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'n': Start.BN |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'B': Start.WB |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'b': Start.BB |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'R': Start.WR |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'r': Start.BR |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'Q': Start.WQ |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'q': Start.BQ |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'K': Start.WK |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase 'k': Start.BK |= (1L << boardIndex++);","\t\t\tbreak;","\t\tcase '/':","\t\t\tbreak;","\t\tcase '1': boardIndex++;","\t\t\tbreak;","\t\tcase '2': boardIndex += 2;","\t\t\tbreak;","\t\tcase '3': boardIndex += 3;","\t\t\tbreak;","\t\tcase '4': boardIndex += 4;","\t\t\tbreak;","\t\tcase '5': boardIndex += 5;","\t\t\tbreak;","\t\tcase '6': boardIndex += 6;","\t\t\tbreak;","\t\tcase '7': boardIndex += 7;","\t\t\tbreak;","\t\tcase '8': boardIndex += 8;","\t\t\tbreak;","\t\tdefault:","\t\t\tbreak;","\t\t}","\t}","\tStart.WhiteToMove = (fenString.charAt(++charIndex) == 'w');","\tcharIndex += 2;","\twhile (fenString.charAt(charIndex) != ' ')","\t{","\t\tswitch (fenString.charAt(charIndex++))","\t\t{","\t\tcase '-':","\t\t\tbreak;","\t\tcase 'K': Start.CWK = true;","\t\t\tbreak;","\t\tcase 'Q': Start.CWQ = true;","\t\t\tbreak;","\t\tcase 'k': Start.CBK = true;","\t\t\tbreak;","\t\tcase 'q': Start.CBQ = true;","\t\t\tbreak;","\t\tdefault:","\t\t\tbreak;","\t\t}","\t}","\tif (fenString.charAt(++charIndex) != '-')","\t{","\t\tStart.EP = Moves.FileMasks8[fenString.charAt(charIndex++) - 'a'];","\t}","","    }","    public static void arrayToBitboards(String[][] chessBoard, long WP, long WN, long WB, long WR, long WQ, long WK, long BP, long BN, long BB, long BR, long BQ, long BK) {","       /*","        convert array to bitboard","        */","    \tString Binary;","        for (int i = 0; i < 64;i++) {","            Binary = \"0000000000000000000000000000000000000000000000000000000000000000\";","            Binary = Binary.substring(i + 1) + \"1\" + Binary.substring(0, i);","            switch (chessBoard[i/8][i%8]) {","                case \"P\": WP += convertStringToBitboard(Binary);","                    break;","                case \"N\": WN += convertStringToBitboard(Binary);","                    break;","                case \"B\": WB += convertStringToBitboard(Binary);","                    break;","                case \"R\": WR += convertStringToBitboard(Binary);","                    break;","                case \"Q\": WQ += convertStringToBitboard(Binary);","                    break;","                case \"K\": WK += convertStringToBitboard(Binary);","                    break;","                case \"p\": BP += convertStringToBitboard(Binary);","                    break;","                case \"n\": BN += convertStringToBitboard(Binary);","                    break;","                case \"b\": BB += convertStringToBitboard(Binary);","                    break;","                case \"r\": BR += convertStringToBitboard(Binary);","                    break;","                case \"q\": BQ += convertStringToBitboard(Binary);","                    break;","                case \"k\": BK += convertStringToBitboard(Binary);","                    break;","            }","        }","        drawArray(WP, WN, WB, WR, WQ, WK, BP, BN, BB, BR, BQ, BK);","        Start.WP = WP; Start.WN = WN; Start.WB = WB;","        Start.WR = WR; Start.WQ = WQ; Start.WK = WK;","        Start.BP = BP; Start.BN = BN; Start.BB = BB;","        Start.BR = BR; Start.BQ = BQ; Start.BK = BK;","    }","    public static long convertStringToBitboard(String Binary) {","        if (Binary.charAt(0) == '0') {//not going to be a negative number","            return Long.parseLong(Binary, 2);","        } else {","            return Long.parseLong(\"1\" + Binary.substring(2), 2) * 2;","        }","    }","    public static void drawArray(long WP, long WN, long WB, long WR, long WQ, long WK, long BP, long BN, long BB, long BR, long BQ, long BK) {","        String chessBoard[][] = new String[8][8];","        for (int i = 0;i < 64;i++) {","            chessBoard[i/8][i%8] = \" \";","        }","        for (int i=0;i<64;i++) {","            if (((WP >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"P\";}","            if (((WN >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"N\";}","            if (((WB >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"B\";}","            if (((WR >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"R\";}","            if (((WQ >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"Q\";}","            if (((WK >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"K\";}","            if (((BP >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"p\";}","            if (((BN >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"n\";}","            if (((BB >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"b\";}","            if (((BR >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"r\";}","            if (((BQ >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"q\";}","            if (((BK >> i) & 1) == 1) {chessBoard[i/8][i%8] = \"k\";}","        }","        for (int i = 0; i < 8; i++) {","            System.out.println(Arrays.toString(chessBoard[i]));","        }","    }","}"],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":258,"column":1},"end":{"row":258,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"3ca82ac4be09f44773342f86896c8ab7f6121aad","timestamp":1534028255667}